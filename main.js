// Generated by CoffeeScript 1.10.0
(function() {
  var die, fade, fullscreen, hide, input, kill, run, session_length, show, start, stroke, tick, time_div, time_left, time_since_stroke, tock, update_clock, update_stats, valid_keys, win;

  session_length = 5 * 60;

  time_left = session_length;

  time_since_stroke = 0;

  time_div = document.getElementById('time');

  input = document.getElementById('input');

  run = false;

  tock = null;

  valid_keys = /Digit.|Key.|Space|Backspace|Bracket.+|Enter|Semicolon|Quote|Backquote|Backslash|Comma|Period|Slash|Numpad.+/;

  kill = 5;

  fade = 2;

  update_clock = function() {
    var dd;
    dd = function(time) {
      var result;
      result = '' + Math.floor(time);
      if (result.length === 1) {
        return '0' + result;
      } else {
        return result;
      }
    };
    return time_div.innerHTML = (dd(Math.floor(time_left / 60))) + ":" + (dd(time_left % 60));
  };

  update_stats = function() {
    var chars, words, wpm;
    chars = input.value.length;
    words = input.value.split(" ").length;
    wpm = Math.floor(60 * words / (session_length - time_left));
    return document.getElementById('stats').innerHTML = chars + "c " + words + "w " + wpm + "wpm";
  };

  die = function() {
    input.value = '';
    input.placeholder = "";
    clearInterval(tock);
    run = false;
    return show('die');
  };

  win = function() {
    clearInterval(tock);
    run = false;
    show('win_button');
    return time_div.style.display = "none";
  };

  tick = function() {
    var perc;
    time_left -= 0.1;
    time_since_stroke += 0.1;
    update_clock();
    update_stats();
    if (time_left <= 0) {
      return win();
    } else if (time_since_stroke > kill) {
      return die();
    } else if (time_since_stroke > fade) {
      perc = (time_since_stroke - fade) / (kill - fade);
      input.style.opacity = 1 - perc;
      return document.body.style.boxShadow = "inset 0px 0px " + (Math.floor(100 * perc)) + "px 0px rgba(242, 77, 77, " + (perc * .7) + ")";
    }
  };

  stroke = function(e) {
    if (!e.code.match(valid_keys)) {
      return;
    }
    time_since_stroke = 0;
    if (!run) {
      run = true;
      return tock = setInterval(tick, 100);
    } else {
      input.style.opacity = 1;
      return document.body.style.boxShadow = "none";
    }
  };

  input.onkeydown = stroke;

  fullscreen = function(el) {
    if (el.requestFullscreen) {
      return el.requestFullscreen();
    } else if (el.mozRequestFullScreen) {
      return el.mozRequestFullScreen();
    } else if (el.webkitRequestFullscreen) {
      return el.webkitRequestFullscreen();
    } else if (el.msRequestFullscreen) {
      return el.msRequestFullscreen();
    }
  };

  hide = function(id) {
    var el;
    el = document.getElementById(id).style.display = 'none';
    return document.getElementById('status').style.opacity = 1;
  };

  show = function(id) {
    return document.getElementById(id).style.display = 'block';
  };

  start = function() {
    input.value = '';
    time_div.style.display = 'inline';
    input.disabled = false;
    input.style.opacity = 1;
    document.body.style.boxShadow = 'none';
    time_left = session_length;
    update_clock();
    input.placeholder = "Start typing...";
    document.getElementById('status').style.opacity = 1;
    document.getElementById('status_lower').style.opacity = 1;
    hide('logo');
    hide('start');
    hide('win_button');
    return input.focus();
  };

  document.getElementById("show_help").onclick = function() {
    return show('help');
  };

  document.getElementById("hide_help").onclick = function() {
    return hide('help');
  };

  document.getElementById("retry_button").onclick = function() {
    document.body.style.boxShadow = 'none';
    show('start');
    hide('die');
    return input.disabled = true;
  };

  document.getElementById("start_button").onclick = function() {
    var el;
    session_length = parseInt(((function() {
      var i, len, ref, results;
      ref = document.getElementsByClassName('select_time');
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        el = ref[i];
        if (el.checked) {
          results.push(el);
        }
      }
      return results;
    })())[0].value);
    return start();
  };

}).call(this);


//# sourceMappingURL=main.js.map
